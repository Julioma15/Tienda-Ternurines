/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.administration;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import org.bson.types.ObjectId;

/**
 *
 * @author Usuario
 */
public class orders extends javax.swing.JFrame {

    /**
     * Creates new form orders_mongo
     */
    public orders() {
        initComponents();
        
        // Configurar el JFrame
        setTitle("Ordenes");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Configurar el JFrame para que se centre en la pantalla
        setLocationRelativeTo(null);

        // Configurar el JFrame para que se maximice a pantalla completa
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
    }
    
     private void updateTable(List<Object[]> orders) {
    DefaultTableModel model = (DefaultTableModel) visor_pedidos.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

    for (Object[] order : orders) {
        // Asegúrate de que los datos son del tipo correcto
        Object[] row = new Object[order.length];
        row[0] = order[0]; // ID (String)
        row[1] = order[1]; // Nombre de Usuario (String)
        row[2] = order[2]; // Email (String)
        row[3] = order[3]; // Teléfono (String)
        row[4] = order[4]; // Items (String)
        row[5] = order[5]; // Estado (String)
        row[6] = order[6]; // Fecha de Orden (String)

        model.addRow(row);
    }
}

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        visor_pedidos = new javax.swing.JTable();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        search_order_date = new javax.swing.JButton();
        modify_order = new javax.swing.JButton();
        erase_order = new javax.swing.JButton();
        search_user_name = new javax.swing.JButton();
        search_id = new javax.swing.JButton();
        add_order = new javax.swing.JButton();
        switch_to_inventory = new javax.swing.JButton();
        search_status = new javax.swing.JButton();
        show_all = new javax.swing.JButton();
        search_item = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("PEDIDOS");

        visor_pedidos.setAutoCreateRowSorter(true);
        visor_pedidos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 2, true));
        visor_pedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "_id", "user_name", "email", "phone", "items", "status", "order_date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        visor_pedidos.setCellSelectionEnabled(true);
        visor_pedidos.setGridColor(new java.awt.Color(153, 153, 153));
        visor_pedidos.setRowHeight(30);
        visor_pedidos.setShowGrid(true);
        jScrollPane1.setViewportView(visor_pedidos);

        jInternalFrame1.setVisible(true);

        search_order_date.setText("Buscar por order_date");
        search_order_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_order_dateActionPerformed(evt);
            }
        });

        modify_order.setText("Modificar status");
        modify_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modify_orderActionPerformed(evt);
            }
        });

        erase_order.setText("Cancelar pedido");
        erase_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erase_orderActionPerformed(evt);
            }
        });

        search_user_name.setText("Buscar por user_name");
        search_user_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_user_nameActionPerformed(evt);
            }
        });

        search_id.setText("Buscar por _id");
        search_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_idActionPerformed(evt);
            }
        });

        add_order.setText("Agregar pedido");
        add_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_orderActionPerformed(evt);
            }
        });

        switch_to_inventory.setText("Cambiar a inventario");
        switch_to_inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switch_to_inventoryActionPerformed(evt);
            }
        });

        search_status.setText("Buscar por status");
        search_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_statusActionPerformed(evt);
            }
        });

        show_all.setText("Mostrar todo");
        show_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_allActionPerformed(evt);
            }
        });

        search_item.setText("Buscar por item");
        search_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_itemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(show_all, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search_item, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search_user_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search_order_date, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(erase_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modify_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(switch_to_inventory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(show_all, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_item, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_user_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_order_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(add_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modify_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(erase_order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(switch_to_inventory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void switch_to_inventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switch_to_inventoryActionPerformed
        new Principal().setVisible(true);
        this.dispose(); // Cerrar el JFrame actual
    }//GEN-LAST:event_switch_to_inventoryActionPerformed

    private void erase_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erase_orderActionPerformed
        String id = JOptionPane.showInputDialog("Ingrese el ID de la orden a borrar:");
        try {
            MongoConnection.eraseOrder(id);
            show_allActionPerformed(evt); // Actualizar la tabla
        } catch (Exception e) {
            System.err.println("Error al borrar la orden: " + e.getMessage());
        }
    }//GEN-LAST:event_erase_orderActionPerformed

    private void search_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_statusActionPerformed
        // Opciones de estado
        String[] options = {"completado", "pendiente"};
        int choice = JOptionPane.showOptionDialog(
            null,
            "Seleccione el estado de la orden:",
            "Buscar por Estado",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.INFORMATION_MESSAGE,
            null,
            options,
            options[0]
        );

        // Verificar si el usuario hizo una selección
        if (choice >= 0) {
            String status = options[choice];
            List<Object[]> data = MongoConnection.fetchData().stream()
                .filter(row -> status.equals(row[5]))
                .collect(Collectors.toList());
            updateTable(data);
        }
    }//GEN-LAST:event_search_statusActionPerformed

    private void show_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_allActionPerformed
        List<Object[]> data = MongoConnection.fetchData();
        updateTable(data);
    }//GEN-LAST:event_show_allActionPerformed

    private void search_user_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_user_nameActionPerformed
        String userName = JOptionPane.showInputDialog("Ingrese el nombre de usuario:");
        List<Document> documents = MongoConnection.searchByUserName(userName);
        List<Object[]> data = documents.stream().map(doc -> new Object[]{
            doc.getObjectId("_id").toString(),
            doc.getString("user_name"),
            doc.getString("email"),
            doc.getString("phone"),
            doc.get("items_id").toString(),
            doc.getString("status"),
            doc.getString("order_date")
        }).collect(Collectors.toList());
        updateTable(data);
    }//GEN-LAST:event_search_user_nameActionPerformed

    private void search_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_idActionPerformed
        String id = JOptionPane.showInputDialog("Ingrese el ID de la orden:");
        List<Object[]> data = MongoConnection.fetchData().stream()
        .filter(row -> id.equals(row[0]))
        .collect(Collectors.toList());
        updateTable(data);
    }//GEN-LAST:event_search_idActionPerformed

    private void search_order_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_order_dateActionPerformed
        String orderDate = JOptionPane.showInputDialog("Ingrese la fecha de la orden (dd/MM/yyyy):");
        List<Object[]> data = MongoConnection.fetchData().stream()
        .filter(row -> orderDate.equals(row[6]))
        .collect(Collectors.toList());
        updateTable(data);
    }//GEN-LAST:event_search_order_dateActionPerformed

    private void search_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_itemActionPerformed
        String itemIdStr = JOptionPane.showInputDialog("Ingrese el ID del ítem:");
        int itemId = Integer.parseInt(itemIdStr);
        List<Document> documents = MongoConnection.searchByItemName(itemId);
        List<Object[]> data = documents.stream().map(doc -> new Object[]{
            doc.getObjectId("_id").toString(),
            doc.getString("user_name"),
            doc.getString("email"),
            doc.getString("phone"),
            doc.get("items_id").toString(),
            doc.getString("status"),
            doc.getString("order_date")
        }).collect(Collectors.toList());
        updateTable(data);
    }//GEN-LAST:event_search_itemActionPerformed

    private void modify_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modify_orderActionPerformed
        String id = JOptionPane.showInputDialog("Ingrese el ID de la orden a modificar:");
    
            // Opciones de estado
            String[] options = {"completado", "pendiente"};
            int choice = JOptionPane.showOptionDialog(
                null,
                "Seleccione el nuevo estado de la orden:",
                "Modificar Estado de la Orden",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                options,
                options[0]
            );

            // Verificar si el usuario hizo una selección
            if (choice >= 0) {
                String newStatus = options[choice];
                try (MongoClient mongoClient = new MongoClient("localhost", 27017)) {
                    MongoDatabase database = mongoClient.getDatabase("Sylvanian_orders");
                    MongoCollection<Document> collection = database.getCollection("orders");
                    collection.updateOne(new Document("_id", new ObjectId(id)), new Document("$set", new Document("status", newStatus)));
                    show_allActionPerformed(evt); // Actualizar la tabla
                } catch (Exception e) {
                    System.err.println("Error al modificar la orden: " + e.getMessage());
                }
            }
    }//GEN-LAST:event_modify_orderActionPerformed

    private void add_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_orderActionPerformed
        String userName = JOptionPane.showInputDialog("Ingrese el nombre de usuario:");
        String email = JOptionPane.showInputDialog("Ingrese el email:");
        String phone = JOptionPane.showInputDialog("Ingrese el teléfono:");
        String itemsIdStr = JOptionPane.showInputDialog("Ingrese los IDs de los ítems (separados por comas):");
        List<Integer> itemsId = Arrays.stream(itemsIdStr.split(","))
        .map(String::trim)
        .map(Integer::parseInt)
        .collect(Collectors.toList());
        String status = JOptionPane.showInputDialog("Ingrese el estado:");
        String orderDate = JOptionPane.showInputDialog("Ingrese la fecha de la orden (dd/MM/yyyy):");

        try (MongoClient mongoClient = new MongoClient("localhost", 27017)) {
            MongoDatabase database = mongoClient.getDatabase("Sylvanian_orders");
            MongoCollection<Document> collection = database.getCollection("orders");
            Document newOrder = new Document("user_name", userName)
            .append("email", email)
            .append("phone", phone)
            .append("items_id", itemsId)
            .append("status", status)
            .append("order_date", orderDate);
            collection.insertOne(newOrder);
            show_allActionPerformed(evt); // Actualizar la tabla
        } catch (Exception e) {
            System.err.println("Error al agregar la orden: " + e.getMessage());
        }
    }//GEN-LAST:event_add_orderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_order;
    private javax.swing.JButton erase_order;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modify_order;
    private javax.swing.JButton search_id;
    private javax.swing.JButton search_item;
    private javax.swing.JButton search_order_date;
    private javax.swing.JButton search_status;
    private javax.swing.JButton search_user_name;
    private javax.swing.JButton show_all;
    private javax.swing.JButton switch_to_inventory;
    public javax.swing.JTable visor_pedidos;
    // End of variables declaration//GEN-END:variables
}
