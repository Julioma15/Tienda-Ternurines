/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.administration;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 *
 * @author Usuario
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        // Configurar el JFrame
        setTitle("Inventario");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Configurar el JFrame para que se centre en la pantalla
        setLocationRelativeTo(null);

        // Configurar el JFrame para que se maximice a pantalla completa
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
    }
    
    private void updateTable(List<InventoryItem> inventario) {
    DefaultTableModel model = (DefaultTableModel) visor.getModel();
    model.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

    for (InventoryItem item : inventario) {
        Object[] row = {
            item.getItemId(),
            item.getItemName(),
            item.getCategory(),
            item.getStock(),
            item.getPrice(),
            item.getDescription(),
            item.getSupplier()
        };
        model.addRow(row);
    }
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        visor = new javax.swing.JTable();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        clean = new javax.swing.JButton();
        add_item = new javax.swing.JButton();
        search_itemname = new javax.swing.JButton();
        search_category = new javax.swing.JButton();
        search_supplier = new javax.swing.JButton();
        remove_item = new javax.swing.JButton();
        showEverything = new javax.swing.JButton();
        search_itemid = new javax.swing.JButton();
        modify_stock = new javax.swing.JButton();
        switch_to_orders = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        visor.setAutoCreateRowSorter(true);
        visor.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 2, true));
        visor.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        visor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "item_id", "item_name", "category", "stock", "price", "description", "supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        visor.setAlignmentX(0.0F);
        visor.setAlignmentY(0.0F);
        visor.setGridColor(new java.awt.Color(153, 153, 153));
        visor.setRowHeight(40);
        visor.setRowMargin(2);
        visor.setShowGrid(true);
        visor.setShowHorizontalLines(true);
        visor.setShowVerticalLines(true);
        jScrollPane1.setViewportView(visor);
        if (visor.getColumnModel().getColumnCount() > 0) {
            visor.getColumnModel().getColumn(0).setMinWidth(50);
            visor.getColumnModel().getColumn(0).setPreferredWidth(50);
            visor.getColumnModel().getColumn(0).setMaxWidth(60);
            visor.getColumnModel().getColumn(1).setMinWidth(250);
            visor.getColumnModel().getColumn(1).setPreferredWidth(250);
            visor.getColumnModel().getColumn(1).setMaxWidth(260);
            visor.getColumnModel().getColumn(2).setMinWidth(160);
            visor.getColumnModel().getColumn(2).setPreferredWidth(160);
            visor.getColumnModel().getColumn(2).setMaxWidth(170);
            visor.getColumnModel().getColumn(3).setMinWidth(40);
            visor.getColumnModel().getColumn(3).setPreferredWidth(40);
            visor.getColumnModel().getColumn(3).setMaxWidth(50);
            visor.getColumnModel().getColumn(4).setMinWidth(40);
            visor.getColumnModel().getColumn(4).setPreferredWidth(40);
            visor.getColumnModel().getColumn(4).setMaxWidth(50);
            visor.getColumnModel().getColumn(6).setMinWidth(80);
            visor.getColumnModel().getColumn(6).setPreferredWidth(80);
            visor.getColumnModel().getColumn(6).setMaxWidth(90);
        }

        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jInternalFrame1.setForeground(new java.awt.Color(255, 255, 255));
        jInternalFrame1.setVisible(true);

        clean.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clean.setText("Limpiar");
        clean.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanActionPerformed(evt);
            }
        });

        add_item.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        add_item.setText("Agregar item");
        add_item.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_itemActionPerformed(evt);
            }
        });

        search_itemname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search_itemname.setText("Buscar por nombre");
        search_itemname.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search_itemname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_itemnameActionPerformed(evt);
            }
        });

        search_category.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search_category.setText("Buscar por categoria");
        search_category.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_categoryActionPerformed(evt);
            }
        });

        search_supplier.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search_supplier.setText("Buscar por proveedor");
        search_supplier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search_supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_supplierActionPerformed(evt);
            }
        });

        remove_item.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        remove_item.setText("Eliminar item");
        remove_item.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        remove_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_itemActionPerformed(evt);
            }
        });

        showEverything.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        showEverything.setText("Mostrar todo");
        showEverything.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        showEverything.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showEverything.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showEverythingActionPerformed(evt);
            }
        });

        search_itemid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        search_itemid.setText("Buscar por item_id");
        search_itemid.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search_itemid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_itemidActionPerformed(evt);
            }
        });

        modify_stock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        modify_stock.setText("Modificar stock");
        modify_stock.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modify_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modify_stockActionPerformed(evt);
            }
        });

        switch_to_orders.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        switch_to_orders.setText("Cambiar a pedidos");
        switch_to_orders.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        switch_to_orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switch_to_ordersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modify_stock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(clean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_category, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_itemid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_itemname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showEverything, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search_supplier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(add_item, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(remove_item, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(switch_to_orders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jInternalFrame1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add_item, clean, modify_stock, remove_item, search_category, search_itemid, search_itemname, search_supplier, showEverything});

        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showEverything, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_itemid)
                .addGap(12, 12, 12)
                .addComponent(search_itemname)
                .addGap(12, 12, 12)
                .addComponent(search_category)
                .addGap(12, 12, 12)
                .addComponent(search_supplier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clean)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(add_item, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(remove_item)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modify_stock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(switch_to_orders))
        );

        jInternalFrame1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add_item, clean, modify_stock, remove_item, search_category, search_itemid, search_itemname, search_supplier, showEverything});

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setText("INVENTARIO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showEverythingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showEverythingActionPerformed
        List<InventoryItem> inventario = PostgresConnection.fetchData();
        DefaultTableModel model = (DefaultTableModel) visor.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

        for (InventoryItem item : inventario) {
            Object[] row = {
                item.getItemId(),
                item.getItemName(),
                item.getCategory(),
                item.getStock(),
                item.getPrice(),
                item.getDescription(),
                item.getSupplier()
            };
            model.addRow(row);
        }
    }//GEN-LAST:event_showEverythingActionPerformed

    private void search_itemnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_itemnameActionPerformed
        String itemName = JOptionPane.showInputDialog(this, "Ingrese el nombre del artículo:");
    if (itemName != null && !itemName.trim().isEmpty()) {
        List<InventoryItem> inventario = PostgresConnection.searchByItemName(itemName);
        updateTable(inventario);
    }
    }//GEN-LAST:event_search_itemnameActionPerformed

    private void search_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_categoryActionPerformed
        // TODO add your handling code here:private void search_categoryActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    String category = JOptionPane.showInputDialog(this, "Ingrese la categoría:");
    if (category != null && !category.trim().isEmpty()) {
        List<InventoryItem> inventario = PostgresConnection.searchByCategory(category);
        updateTable(inventario);
    }
    }//GEN-LAST:event_search_categoryActionPerformed

    private void search_itemidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_itemidActionPerformed
        String itemIdStr = JOptionPane.showInputDialog(this, "Ingrese el ID del artículo:");
    try {
        int itemId = Integer.parseInt(itemIdStr);
        List<InventoryItem> inventario = PostgresConnection.searchByItemId(itemId);
        updateTable(inventario);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID inválido. Por favor, ingrese un número.");
    }
    }//GEN-LAST:event_search_itemidActionPerformed

    private void add_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_itemActionPerformed
        // Aquí puedes agregar un formulario para ingresar los datos del nuevo artículo
    // Por simplicidad, usaremos JOptionPane para ingresar los datos
    try {
        int itemId = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el ID del artículo:"));
        String itemName = JOptionPane.showInputDialog(this, "Ingrese el nombre del artículo:");
        String category = JOptionPane.showInputDialog(this, "Ingrese la categoría:");
        int stock = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el stock:"));
        double price = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese el precio:"));
        String description = JOptionPane.showInputDialog(this, "Ingrese la descripción:");
        String supplier = JOptionPane.showInputDialog(this, "Ingrese el proveedor:");

        InventoryItem newItem = new InventoryItem(itemId, itemName, category, stock, price, description, supplier);
        PostgresConnection.addItem(newItem);
        updateTable(PostgresConnection.fetchData());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Datos inválidos. Por favor, ingrese los datos correctamente.");
    }
    }//GEN-LAST:event_add_itemActionPerformed

    private void cleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanActionPerformed
        DefaultTableModel model = (DefaultTableModel) visor.getModel();
    model.setRowCount(0); // Limpiar la tabla
    }//GEN-LAST:event_cleanActionPerformed

    private void remove_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_itemActionPerformed
        String itemIdStr = JOptionPane.showInputDialog(this, "Ingrese el ID del artículo a eliminar:");
    try {
        int itemId = Integer.parseInt(itemIdStr);
        PostgresConnection.removeItem(itemId);
        updateTable(PostgresConnection.fetchData());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "ID inválido. Por favor, ingrese un número.");
    }
    }//GEN-LAST:event_remove_itemActionPerformed

    private void search_supplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_supplierActionPerformed
        String supplier = JOptionPane.showInputDialog(this, "Ingrese el nombre del proovedor:");
    if (supplier != null && !supplier.trim().isEmpty()) {
        List<InventoryItem> inventario = PostgresConnection.searchByItemName(supplier);
        updateTable(inventario);
    }
    }//GEN-LAST:event_search_supplierActionPerformed

    private void modify_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modify_stockActionPerformed
        try {
        String itemIdStr = JOptionPane.showInputDialog(this, "Ingrese el ID del artículo:");
        int itemId = Integer.parseInt(itemIdStr);

        String newStockStr = JOptionPane.showInputDialog(this, "Ingrese el nuevo stock:");
        int newStock = Integer.parseInt(newStockStr);

        PostgresConnection.updateStock(itemId, newStock);
        JOptionPane.showMessageDialog(this, "Stock actualizado exitosamente.");

        // Actualizar la tabla para reflejar los cambios
        updateTable(PostgresConnection.fetchData());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Entrada inválida. Por favor, ingrese números válidos.");
    }
    }//GEN-LAST:event_modify_stockActionPerformed

    private void switch_to_ordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switch_to_ordersActionPerformed
        new orders().setVisible(true); // Mostrar el JFrame de órdenes
        this.dispose(); // Cerrar el JFrame principal
    }//GEN-LAST:event_switch_to_ordersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_item;
    private javax.swing.JButton clean;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modify_stock;
    private javax.swing.JButton remove_item;
    public javax.swing.JButton search_category;
    public javax.swing.JButton search_itemid;
    public javax.swing.JButton search_itemname;
    public javax.swing.JButton search_supplier;
    public javax.swing.JButton showEverything;
    private javax.swing.JButton switch_to_orders;
    public javax.swing.JTable visor;
    // End of variables declaration//GEN-END:variables
}
